[{"C:\\Users\\Zunaira\\calculator\\src\\index.js":"1","C:\\Users\\Zunaira\\calculator\\src\\App.js":"2","C:\\Users\\Zunaira\\calculator\\src\\reportWebVitals.js":"3","C:\\Users\\Zunaira\\calculator\\src\\redux\\store.js":"4","C:\\Users\\Zunaira\\calculator\\src\\containers\\Main\\Main.js":"5","C:\\Users\\Zunaira\\calculator\\src\\redux\\reducers\\reducer.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":242,"mtime":1610363349911,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":332,"mtime":1611688430844,"results":"11","hashOfConfig":"8"},{"size":6619,"mtime":1621269977060,"results":"12","hashOfConfig":"8"},{"size":5584,"mtime":1621269652278,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1cbxhxy",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Zunaira\\calculator\\src\\index.js",[],["29","30"],"C:\\Users\\Zunaira\\calculator\\src\\App.js",["31"],"import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Main from './containers/Main/Main';\nclass App extends Component{\n  render() {\n    return(\n      <Main></Main>\n    )\n  }\n}\n\n\nexport default App;\n","C:\\Users\\Zunaira\\calculator\\src\\reportWebVitals.js",[],"C:\\Users\\Zunaira\\calculator\\src\\redux\\store.js",[],"C:\\Users\\Zunaira\\calculator\\src\\containers\\Main\\Main.js",["32"],"import React, {Component,useState} from 'react';\r\nimport styles from './Main.module.css';\r\nimport store from '../../redux/store';\r\nclass Main extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.clickHandler = this.clickHandler.bind(this);\r\n        this.state = {\r\n            inputScreen: ''\r\n        } \r\n    }\r\n    \r\n    \r\n    clickHandler( char){\r\n        switch(char){\r\n            case '+':\r\n                console.log(store.getState())\r\n             return (store.dispatch({\r\n                     type: \"ADD\",\r\n                        cur: \"\",\r\n                        operator : char,\r\n                        index: store.getState().index + 1\r\n                    }))\r\n\r\n            case '-':\r\n                    (store.dispatch({\r\n                     type: \"SUBTRACT\",\r\n                        operator: char,\r\n                        cur : \"\",\r\n                        index : store.getState().index  +1\r\n                    }))\r\n                    break;\r\n            case '*':\r\n                     (store.dispatch({\r\n                     type: \"MULTIPLY\",\r\n                        operator: char,\r\n                        cur : \"\",\r\n                        index: store.getState().index + 1\r\n                    }))\r\n                    break;\r\n            case '/':\r\n                    (store.dispatch({ \r\n                     type: \"DIVIDE\",  \r\n                        operator: char,\r\n                        cur : \"\",\r\n                        index: store.getState().index + 1\r\n                    }))\r\n                    break;\r\n            case '=':\r\n                \r\n                    (store.dispatch({\r\n                        type: \"EQUAL\",\r\n                        cur: \"\",\r\n                        operator: char\r\n                       \r\n                    }))\r\n                    break;\r\n            case \"0\":\r\n            case \"1\":\r\n            case \"2\":\r\n            case \"3\":\r\n            case \"4\":\r\n            case \"5\":\r\n            case \"6\":\r\n            case \"7\":\r\n            case \"8\":\r\n            case \"9\":\r\n            case \".\":\r\n                store.dispatch({\r\n                    type: \"DIGITS\",\r\n                    prev: char,\r\n                    cur : char,\r\n                    operatorClicked: false  ,\r\n                    index : store.getState().index          \r\n                })\r\n            break;\r\n              \r\n            default:\r\n                return null;\r\n            }\r\n           \r\n        }\r\n        \r\n    clearScreen(digit){\r\n       this.setState({\r\n           inputScreen : digit\r\n       })\r\n       store.dispatch(\r\n           {\r\n               type: \"CLEAR\"\r\n           }\r\n       )\r\n    }\r\n    changeInputScreen(digit){\r\n        if(digit === \"=\"){\r\n        this.setState({\r\n            inputScreen: this.state.inputScreen + digit + store.getState().result\r\n        })\r\n        }else{\r\n        this.setState({\r\n            inputScreen: this.state.inputScreen + digit\r\n        })\r\n        }   \r\n    }\r\n    render() {\r\n        \r\n        return(\r\n            <div id = {styles.cover} >\r\n               <input  value = {this.state.inputScreen} style = {{ backgroundColor: 'black', color: 'white', gridArea: 'output'}}>\r\n                   \r\n               </input>\r\n               <div style = {{ backgroundColor: 'black', color: 'white', gridArea: 'input'}}>\r\n                   <p id = \"output\"  style = {{direction:\"rtl\"}}></p>\r\n               </div>\r\n               <button  id = {styles.clear}  onClick = {() => this.clearScreen(\"\")}>AC</button>\r\n               <button id = {styles.zero} onClick = {() => {\r\n                   this.clickHandler('0')\r\n                    this.changeInputScreen('0')\r\n                }}>0</button>\r\n               <button id = {styles.one} onClick = {() => {\r\n                   this.clickHandler('1')\r\n                   this.changeInputScreen('1')   \r\n                }} >1</button>\r\n               <button id = {styles.two} onClick = {() =>{\r\n                    this.clickHandler('2')\r\n                    this.changeInputScreen('2')    \r\n                }}>2</button>\r\n               <button id = {styles.three} onClick = {() => {\r\n                   this.clickHandler('3')\r\n                   this.changeInputScreen('3')\r\n                }}>3</button>\r\n               <button id = {styles.four} onClick = {() => {\r\n                   this.clickHandler('4')\r\n                   this.changeInputScreen('4')\r\n                }}>4</button>\r\n               <button id = {styles.five} onClick = {() =>{\r\n                   this.clickHandler('5')\r\n                   this.changeInputScreen('5')   \r\n                }}>5</button>\r\n               <button id = {styles.six} onClick = {() => {\r\n                   this.clickHandler('6')\r\n                   this.changeInputScreen('6')\r\n                }}>6</button>\r\n               <button id = {styles.seven} onClick = {() => {\r\n                   this.clickHandler('7')\r\n                   this.changeInputScreen('7')\r\n                }}>7</button>\r\n               <button id = {styles.eight} onClick = {() =>{\r\n                    this.clickHandler('8')\r\n                    this.changeInputScreen('8')    \r\n                }}>8</button>\r\n               <button id = {styles.nine} onClick = {() =>{\r\n                   this.clickHandler('9')\r\n                   this.changeInputScreen('9')\r\n               }}>9</button>\r\n               <button id = {styles.decimal} onClick = {() =>{\r\n                   this.clickHandler('.')\r\n                   this.changeInputScreen('.')   \r\n                }}>.</button>\r\n               <button id = {styles.equal} onClick = {() => {\r\n                   this.clickHandler('=')\r\n                   this.changeInputScreen('=')\r\n                }}>=</button>\r\n               <button id = {styles.add} onClick = {() =>{\r\n                   this.clickHandler('+')\r\n                   this.changeInputScreen('+')\r\n                }}>+</button>\r\n               <button id = {styles.subtract} onClick = {() =>{\r\n                   this.clickHandler('-')\r\n                   this.changeInputScreen('-')\r\n                }}>-</button>\r\n               <button id = {styles.multiply} onClick = {() =>{\r\n                   this.clickHandler('*')\r\n                   this.changeInputScreen('*')\r\n                }}>*</button>\r\n               <button id = {styles.divide} onClick = {() =>{\r\n                   this.clickHandler('/')\r\n                   this.changeInputScreen('/')   \r\n                }}>/</button>\r\n               \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main","C:\\Users\\Zunaira\\calculator\\src\\redux\\reducers\\reducer.js",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":2,"column":8,"nodeType":"39","messageId":"40","endLine":2,"endColumn":12},{"ruleId":"37","severity":1,"message":"41","line":1,"column":26,"nodeType":"39","messageId":"40","endLine":1,"endColumn":34},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]